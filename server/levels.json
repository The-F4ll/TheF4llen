{
  "levels": [
    {
      "level": 1,
      "title": "La Pente Inaccessible",
      "description": {
        "lore": "Au pied du Mont Seraph, une pente raide et glissante se dresse devant vous. Le terrain est instable et l'ascension semble impossible. Chaque grimpeur détient une partie de la solution pour franchir cette première barrière.",
        "objectif": "Reconstruire la séquence logique des mouvements d'escalade en utilisant les indices fournis par chaque grimpeur."
      },
      "players": {
        "1": {
          "code": "function calculerAngle(hauteur, distance) {\n  // Complétez cette fonction\n}",
          "hint": "L'angle optimal pour l'escalade est de 45 degrés.",
          "role": "Le calculateur d'angles"
        },
        "2": {
          "code": "const angle = calculerAngle(100, 100);\nconst force = calculerForce(angle);\n// Complétez le calcul de la force",
          "hint": "La force nécessaire est proportionnelle au sinus de l'angle.",
          "role": "Le calculateur de force"
        },
        "3": {
          "code": "function calculerForce(angle) {\n  // Complétez cette fonction\n}",
          "hint": "La force doit être calculée en newtons.",
          "role": "Le physicien"
        },
        "4": {
          "code": "const resultat = verifierStabilite(force, angle);\n// Complétez la vérification",
          "hint": "La stabilité est assurée si la force est supérieure à 500N.",
          "role": "Le vérificateur de stabilité"
        }
      },
      "solution": {
        "1": "function calculerAngle(hauteur, distance) {\n  return Math.atan2(hauteur, distance) * (180 / Math.PI);\n}",
        "2": "const angle = calculerAngle(100, 100);\nconst force = calculerForce(angle);\nconst forceFinale = force * Math.sin(angle * Math.PI / 180);",
        "3": "function calculerForce(angle) {\n  return 1000 * Math.sin(angle * Math.PI / 180);\n}",
        "4": "const resultat = verifierStabilite(force, angle);\nconst estStable = force > 500;"
      }
    },
    {
      "level": 2,
      "title": "Le Ravin des Ombres",
      "description": {
        "lore": "Le chemin devient étroit et des nuages d'ombre masquent la vue. Chaque grimpeur doit utiliser ses compétences spéciales pour guider l'équipe à travers ce passage dangereux.",
        "objectif": "Identifier et éviter les pièges du ravin en utilisant les indices partagés."
      },
      "players": {
        "1": {
          "code": "function detecterObstacle(distance) {\n  // Complétez la détection\n}",
          "hint": "Les obstacles sont détectables à partir de 10 mètres.",
          "role": "Le détecteur d'obstacles"
        },
        "2": {
          "code": "const obstacle = detecterObstacle(15);\nconst chemin = trouverChemin(obstacle);\n// Complétez la recherche du chemin",
          "hint": "Le chemin doit contourner l'obstacle par la gauche.",
          "role": "Le traceur de chemin"
        },
        "3": {
          "code": "function trouverChemin(obstacle) {\n  // Complétez la fonction\n}",
          "hint": "Le chemin doit être à 5 mètres de l'obstacle.",
          "role": "Le navigateur"
        },
        "4": {
          "code": "const estSecurise = verifierSecurite(chemin);\n// Complétez la vérification",
          "hint": "Le chemin est sécurisé s'il est à plus de 3 mètres du bord.",
          "role": "Le vérificateur de sécurité"
        }
      },
      "solution": {
        "1": "function detecterObstacle(distance) {\n  return distance < 10 ? 'danger' : 'sûr';\n}",
        "2": "const obstacle = detecterObstacle(15);\nconst chemin = trouverChemin(obstacle);\nconst cheminOptimal = obstacle === 'danger' ? 'gauche' : 'direct';",
        "3": "function trouverChemin(obstacle) {\n  return obstacle === 'danger' ? {direction: 'gauche', distance: 5} : {direction: 'direct', distance: 0};\n}",
        "4": "const estSecurise = verifierSecurite(chemin);\nconst securite = chemin.distance > 3;"
      }
    },
    {
      "level": 3,
      "title": "Le Pont Suspendu",
      "description": {
        "lore": "Un énorme pont suspendu se dresse devant vous. Chaque membre de l'équipe doit réussir à traverser en synchronisation parfaite, sans quoi le pont se brisera.",
        "objectif": "Calculer la synchronisation nécessaire pour traverser le pont en toute sécurité."
      },
      "players": {
        "1": {
          "code": "function calculerPoids(total) {\n  // Complétez le calcul\n}",
          "hint": "Le poids total ne doit pas dépasser 400kg.",
          "role": "Le calculateur de poids"
        },
        "2": {
          "code": "const poids = calculerPoids(350);\nconst stabilite = calculerStabilite(poids);\n// Complétez le calcul",
          "hint": "La stabilité est inversement proportionnelle au poids.",
          "role": "Le calculateur de stabilité"
        },
        "3": {
          "code": "function calculerStabilite(poids) {\n  // Complétez la fonction\n}",
          "hint": "La stabilité doit être supérieure à 0.7.",
          "role": "L'ingénieur"
        },
        "4": {
          "code": "const peutTraverser = verifierTraversee(stabilite);\n// Complétez la vérification",
          "hint": "La traversée est possible si la stabilité est supérieure à 0.8.",
          "role": "Le vérificateur de traversée"
        }
      },
      "solution": {
        "1": "function calculerPoids(total) {\n  return total <= 400 ? total : 400;\n}",
        "2": "const poids = calculerPoids(350);\nconst stabilite = calculerStabilite(poids);\nconst stabiliteFinale = 1 - (poids / 400);",
        "3": "function calculerStabilite(poids) {\n  return 1 - (poids / 400);\n}",
        "4": "const peutTraverser = verifierTraversee(stabilite);\nconst traverseePossible = stabilite > 0.8;"
      }
    },
    {
      "level": 4,
      "title": "La Tempête de Glace",
      "description": {
        "lore": "Le vent glacial et les flocons de neige rendent la progression difficile. Chaque grimpeur doit utiliser ses indices pour trouver les prises sûres dans la glace.",
        "objectif": "Trouver les prises sûres dans la glace en utilisant les indices de température et de solidité."
      },
      "players": {
        "1": {
          "code": "function verifierTemperature(temp) {\n  // Complétez la vérification\n}",
          "hint": "La température doit être inférieure à -10°C.",
          "role": "Le thermomètre"
        },
        "2": {
          "code": "const temp = verifierTemperature(-15);\nconst solidite = calculerSolidite(temp);\n// Complétez le calcul",
          "hint": "La solidité augmente avec le froid.",
          "role": "Le calculateur de solidité"
        },
        "3": {
          "code": "function calculerSolidite(temp) {\n  // Complétez la fonction\n}",
          "hint": "La solidité est maximale à -20°C.",
          "role": "Le glaciologue"
        },
        "4": {
          "code": "const priseSure = verifierPrise(solidite);\n// Complétez la vérification",
          "hint": "La prise est sûre si la solidité est supérieure à 0.9.",
          "role": "Le vérificateur de prises"
        }
      },
      "solution": {
        "1": "function verifierTemperature(temp) {\n  return temp < -10 ? temp : -10;\n}",
        "2": "const temp = verifierTemperature(-15);\nconst solidite = calculerSolidite(temp);\nconst soliditeFinale = Math.min(1, Math.abs(temp) / 20);",
        "3": "function calculerSolidite(temp) {\n  return Math.min(1, Math.abs(temp) / 20);\n}",
        "4": "const priseSure = verifierPrise(solidite);\nconst estSure = solidite > 0.9;"
      }
    },
    {
      "level": 5,
      "title": "Le Sommet des Étoiles",
      "description": {
        "lore": "Vous approchez du sommet du Mont Seraph. La dernière épreuve consiste à résoudre l'énigme finale en combinant toutes vos connaissances.",
        "objectif": "Combiner les connaissances de chaque grimpeur pour révéler le mot sacré."
      },
      "players": {
        "1": {
          "code": "function decoderLettre(code) {\n  // Complétez le décodage\n}",
          "hint": "La lettre est codée en ASCII.",
          "role": "Le décodeur"
        },
        "2": {
          "code": "const lettre = decoderLettre(83);\nconst mot = construireMot(lettre);\n// Complétez la construction",
          "hint": "Le mot commence par 'S'.",
          "role": "Le constructeur de mots"
        },
        "3": {
          "code": "function construireMot(lettre) {\n  // Complétez la fonction\n}",
          "hint": "Le mot complet est 'SERAPH'.",
          "role": "Le gardien du mot"
        },
        "4": {
          "code": "const estValide = verifierMot(mot);\n// Complétez la vérification",
          "hint": "Le mot doit être exactement 'SERAPH'.",
          "role": "Le vérificateur final"
        }
      },
      "solution": {
        "1": "function decoderLettre(code) {\n  return String.fromCharCode(code);\n}",
        "2": "const lettre = decoderLettre(83);\nconst mot = construireMot(lettre);\nconst motComplet = 'SERAPH';",
        "3": "function construireMot(lettre) {\n  return 'SERAPH';\n}",
        "4": "const estValide = verifierMot(mot);\nconst validation = mot === 'SERAPH';"
      }
    }
  ]
} 